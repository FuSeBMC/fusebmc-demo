name: FuSeBMC Analysis
on:
  pull_request:
  workflow_dispatch:

jobs:
  build:
    runs-on: ubuntu-latest
    permissions:
      contents: read
      security-events: write
      actions: read
    steps:
      - name: Checkout code
        uses: actions/checkout@v3
        with:
          fetch-depth: 0

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.x'

      - name: Install dependencies
        run: |
          pip install -r .github/scripts/Requirements.txt

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2

      - name: Login to GitHub Container Registry
        uses: docker/login-action@v2
        with:
          registry: ghcr.io
          username: ${{ github.repository_owner }}
          password: ${{ secrets.MY_GITHUB_PAT }}

      - name: Pull FuSeBMC Docker image
        run: docker pull ghcr.io/fusebmc/fusebmc-ai:run-ESBMC-individual-property

      - name: Run privileged command
        run: |
          sudo sh -c 'echo core > /proc/sys/kernel/core_pattern'

      - name: Get changed files
        id: changed-files
        run: |
          if [ "${{ github.event_name }}" == "pull_request" ]; then
            git fetch origin ${{ github.base_ref }}
            changed_files=$(git diff --name-only --diff-filter=ACMRT origin/${{ github.base_ref }} ${{ github.sha }} | grep -E '\.c$|\.i$' || true)
          elif [ "${{ github.event_name }}" == "push" ]; then
            if git rev-parse --verify HEAD^1 >/dev/null 2>&1; then
              changed_files=$(git diff --name-only --diff-filter=ACMRT HEAD^1 HEAD | grep -E '\.c$|\.i$' || true)
            else
              changed_files=$(git ls-tree -r --name-only HEAD | grep -E '\.c$|\.i$' || true)
            fi
          else
            changed_files=$(git ls-tree -r --name-only HEAD | grep -E '\.c$|\.i$' || true)
          fi
          echo "Changed files:"
          echo "$changed_files"
          echo "files<<EOF" >> $GITHUB_OUTPUT
          echo "$changed_files" >> $GITHUB_OUTPUT
          echo "EOF" >> $GITHUB_OUTPUT

      - name: Run FuSeBMC on changed C files
        id: fusebmc-analysis
        run: |
          mkdir -p ${{ github.workspace }}/sarif_output  
          vulnerabilities_found=false
          echo "${{ steps.changed-files.outputs.files }}" | while read -r file; do
            if [ -n "$file" ] && [ -f "$file" ]; then
              echo "Processing file: $file"
              # Run FuSeBMC and capture the output
              output=$(docker run \
                --name fusebmc_container \
                -v ${{ github.workspace }}:/workspace \
                ghcr.io/fusebmc/fusebmc-ai:run-ESBMC-individual-property \
                --ESBMC_Multirun --ai --verification -a 64 -s incr /workspace/$file)
             
              # Copy the output from the container to the workspace
              docker cp fusebmc_container:/fusebmc_output ${{ github.workspace }}/fusebmc_output
             
              # Remove the container
              docker rm fusebmc_container

              file_name=$(basename "$file")
              output_dir=$(find ${{ github.workspace }}/fusebmc_output -type d -name "${file_name}_*" | head -n 1)
             
              # Analyze GraphML files for violation witnesses
              for graphml in $output_dir/fusebmc_instrument_output/*.graphml; do
                echo "Checking GraphML file: $graphml"
                if [ -f "$graphml" ] && [[ $graphml != *"veri_1.graphml" && $graphml != *"veri_2.graphml" ]]; then
                  if grep -q '<data key="violation">true</data>' "$graphml"; then
                    echo "Violation found in the following GraphML file: $graphml"
                    vulnerabilities_found=true
                    return 0
                  fi
                fi
              done
              python3 .github/scripts/Make_Sarif.py $output_dir/fusebmc_instrument_output .github/scripts/rules.json
            fi
          done
          echo "SARIF files found in the current directory:"
          find . -name '*.sarif' -type f -print
          find . -name '*.sarif' -exec mv {} ${{ github.workspace }}/sarif_output/ \;
          echo "vulnerabilities_found=$vulnerabilities_found" >> $GITHUB_OUTPUT

      - name: Debug output
        run: echo ${{ steps.fusebmc-analysis.outputs.vulnerabilities_found }}

      - name: Fail if vulnerabilities found
        if: steps.fusebmc-analysis.outputs.vulnerabilities_found == 'true'
        run: |
          echo "Vulnerabilities were found. Pipeline failed."
          exit 1

      - name: Upload SARIF files for Code Scanning
        uses: github/codeql-action/upload-sarif@v3
        with:
          sarif_file: ${{ github.workspace }}/sarif_output

           
